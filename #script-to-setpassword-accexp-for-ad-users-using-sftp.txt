Add-Type -Path "C:\Windows\System32\renci.sshNet.dll"

$password = ConvertTo-SecureString “Shriram@9151” -AsPlainText -Force
 
$creds = New-Object System.Management.Automation.PSCredential (“varun”, $password)
 
#Establishing an SFTP session
 
$Session = New-SFTPSession -Computername 40.76.15.164 -credential $creds

 
#Downloading the .CSV file by using the established SFTP session
 
Get-SFTPItem -SessionId $session.SessionID -Path /SFTPRoot/Test-api/API_Users_data.csv -PSPath  C:\API-USER-DATA -Force

# Specify the OU distinguished name where users are located
$OU = "OU=7,OU=2024,OU=Test-API,DC=secopslab,DC=tech"
 
# Specify the path to the CSV file
$CSVFile = "C:\API-USER-DATA\API_Users_data.csv"
 
# Read the CSV file
$Users = Import-Csv $CSVFile
 
foreach ($User in $Users) {
    $UserPrincipalName = $User.UserPrincipalName
    $Password = $User.Password
    $AccountExpirationDate = $User.AccountExpirationDate
 
    # Convert the password to a secure string
    $SecurePassword = ConvertTo-SecureString $Password -AsPlainText -Force
 
    # Search for the user within the specified OU using Filter on UserPrincipalName
    $ADUser = Get-ADUser -Filter {UserPrincipalName -eq $UserPrincipalName} -SearchBase $OU
 
    if ($ADUser) {
        # Set the new password for the user
        Set-ADAccountPassword -Identity $ADUser -NewPassword $SecurePassword -Reset
        Write-Host "Password updated for user: $UserPrincipalName."
 
        # Check if AccountExpirationDate is provided in the CSV file
        if (-not [string]::IsNullOrEmpty($AccountExpirationDate)) {
            # Convert AccountExpirationDate to DateTime format
            $ExpirationDate = [DateTime]::ParseExact($AccountExpirationDate, "dd/MM/yyyy", [System.Globalization.CultureInfo]::InvariantCulture)
            # Set the account expiration date for the user
            Set-ADAccountExpiration -Identity $ADUser -DateTime $ExpirationDate
            Write-Host "Account expiration date set for user: $UserPrincipalName."
        } else {
            Write-Host "No account expiration date provided for user: $UserPrincipalName. Skipping expiration date update."
        }
 
        # Force the user to change the password at the next logon
        Set-ADUser -Identity $ADUser -ChangePasswordAtLogon $true
        Write-Host "Password change at next logon enabled for user: $UserPrincipalName."
    } else {
        Write-Host "User $UserPrincipalName not found in the specified OU."
    }
}
 
Write-Host "Password update complete for users in the CSV file."

